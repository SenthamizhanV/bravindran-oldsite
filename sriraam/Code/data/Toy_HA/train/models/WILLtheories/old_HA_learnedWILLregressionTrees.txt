useStdLogicNotation: true.

% maxTreeDepthInNodes                 = 5
% maxTreeDepthInLiterals              = 12
% maxNumberOfLiteralsAtAnInteriorNode = 1
% maxFreeBridgersInBody               = 1
% maxNumberOfClauses                  = 12
% maxNodesToConsider                  = 10
% maxNodesToCreate                    = 10,000
% maxAcceptableNodeScoreToStop        = 0.003
% negPosRatio                         = 2.000
% testNegPosRatio                     = -1.000
% # of pos examples                   = 15
% # of neg examples                   = 0



%%%%%  WILL-Produced Tree #1 @ 11:18:58 11/20/18.  [Using 2,641,744 memory cells.]  %%%%%

% FOR HA(a):
%   if ( Chol(a, 160) )
%   then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return 0.22178529873587596;  // std dev = 0.481, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */


% Clauses:

HA(a, 0.6081489350995122) :- 
     Chol(a, 160), 
     !. // Clause #1.

HA(a, 0.22178529873587596) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_Chol(A, 160) ^
   ! => 
   HA(A, 0.6081489350995122). // Flattened version of clause #1.

flattened_! => 
   HA(Underscore, 0.22178529873587596). // Flattened version of clause #2.


% The unique flattened literals:
%   Chol(A, 160)

%%%%%  WILL-Produced Tree #2 @ 11:18:58 11/20/18.  [Using 2,642,664 memory cells.]  %%%%%

% FOR HA(a):
%   return 0;  // std dev = 0.490, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */


% Clauses:

HA(a, 0) :- !. // Clause #1.


% The flattened versions of these clauses:

flattened_! => 
   HA(Underscore, 0). // Flattened version of clause #1.


% The unique flattened literals:

%%%%%  WILL-Produced Tree #3 @ 11:18:58 11/20/18.  [Using 2,660,312 memory cells.]  %%%%%

% FOR HA(a):
%   if ( Chol(a, 160) )
%   then return 0.5170719622367217;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return 0.19258789115538322;  // std dev = 0.481, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */


% Clauses:

HA(a, 0.5170719622367217) :- 
     Chol(a, 160), 
     !. // Clause #1.

HA(a, 0.19258789115538322) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_Chol(A, 160) ^
   ! => 
   HA(A, 0.5170719622367217). // Flattened version of clause #1.

flattened_! => 
   HA(Underscore, 0.19258789115538322). // Flattened version of clause #2.


% The unique flattened literals:
%   Chol(A, 160)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for HA.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).

logPrior(-1.8).
HA(a, total) :- // A general accessor. 
   HA(a, 1000000, total), !.
HA(a, total) :- waitHere("This should not fail", HA(a, total)).

HA(a, treesToUse, total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(logPrior),
   getScore_HA_tree1(a, treesToUse, total1),
   getScore_HA_tree2(a, treesToUse, total2),
   getScore_HA_tree3(a, treesToUse, total3),
   total is logPrior + total1 + total2 + total3,
   !.
HA(a, treesToUse, total) :- waitHere("This should not fail", HA(a, treesToUse, total)).

getScore_HA_tree1(a, treesToUse, 0.0) :- 1 > treesToUse, !.
getScore_HA_tree1(a, treesToUse, total1) :- HA_tree1(a, total), stepLength_tree1(stepLen), total1 is total * stepLen.

getScore_HA_tree2(a, treesToUse, 0.0) :- 2 > treesToUse, !.
getScore_HA_tree2(a, treesToUse, total2) :- HA_tree2(a, total), stepLength_tree2(stepLen), total2 is total * stepLen.

getScore_HA_tree3(a, treesToUse, 0.0) :- 3 > treesToUse, !.
getScore_HA_tree3(a, treesToUse, total3) :- HA_tree3(a, total), stepLength_tree3(stepLen), total3 is total * stepLen.

flattenedLiteralsInThisSetOfTrees(HA, 1, [
   Chol(A, 160)]).

%%%%%  WILL-Produced Tree Combined @ 11:18:58 11/20/18.  [Using 2,673,952 memory cells.]  %%%%%

% FOR HA(a):
%   if ( Chol(a, 160) )
%   then if ( BP(a, 70) )
%   | then return -0.6077071404270443;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 2.392292859572955;  // std dev = 1.88e-07, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( Chol(a, 239) )
%   | then return 2.5160519901375515;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( BP(a, 130) )
%   | | then return 2.5160519901375515;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( BP(a, 90) )
%   | | | then return 2.5160519901375515;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.4839480098624486;  // std dev = 2.98e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */


% Clauses:

HA(a, -0.6077071404270443) :- 
     Chol(a, 160), 
     BP(a, 70), 
     !. // Clause #1.

HA(a, 2.392292859572955) :- 
     Chol(a, 160), 
     !. // Clause #2.

HA(a, 2.5160519901375515) :- 
     Chol(a, 239), 
     !. // Clause #3.

HA(a, 2.5160519901375515) :- 
     BP(a, 130), 
     !. // Clause #4.

HA(a, 2.5160519901375515) :- 
     BP(a, 90), 
     !. // Clause #5.

HA(a, -0.4839480098624486) :- !. // Clause #6.


% The flattened versions of these clauses:

flattened_Chol(A, 160) ^
   BP(A, 70) ^
   ! => 
   HA(A, -0.6077071404270443). // Flattened version of clause #1.

flattened_Chol(A, 160) ^
   ! => 
   HA(A, 2.392292859572955). // Flattened version of clause #2.

flattened_Chol(A, 239) ^
   ! => 
   HA(A, 2.5160519901375515). // Flattened version of clause #3.

flattened_BP(A, 130) ^
   ! => 
   HA(A, 2.5160519901375515). // Flattened version of clause #4.

flattened_BP(A, 90) ^
   ! => 
   HA(A, 2.5160519901375515). // Flattened version of clause #5.

flattened_! => 
   HA(Underscore, -0.4839480098624486). // Flattened version of clause #6.


% The unique flattened literals:
%   BP(A, 70)
%   Chol(A, 239)
%   BP(A, 90)
%   Chol(A, 160)
%   BP(A, 130)
