% Running on host: BL-SOIC-30ZND42

% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.

% Calling ILPouterLoop from createRegressionOuterLooper.

% getInputArgWithDefaultValue: args=[data\Toy_HA\train/train_pos.txt, data\Toy_HA\train/train_neg.txt, data\Toy_HA\train/train_bk.txt, data\Toy_HA\train/train_facts.txt]
%  for N=0: args[N]=data\Toy_HA\train/train_pos.txt

% getInputArgWithDefaultValue: args=[data\Toy_HA\train/train_pos.txt, data\Toy_HA\train/train_neg.txt, data\Toy_HA\train/train_bk.txt, data\Toy_HA\train/train_facts.txt]
%  for N=1: args[N]=data\Toy_HA\train/train_neg.txt

% getInputArgWithDefaultValue: args=[data\Toy_HA\train/train_pos.txt, data\Toy_HA\train/train_neg.txt, data\Toy_HA\train/train_bk.txt, data\Toy_HA\train/train_facts.txt]
%  for N=2: args[N]=data\Toy_HA\train/train_bk.txt

% getInputArgWithDefaultValue: args=[data\Toy_HA\train/train_pos.txt, data\Toy_HA\train/train_neg.txt, data\Toy_HA\train/train_bk.txt, data\Toy_HA\train/train_facts.txt]
%  for N=3: args[N]=data\Toy_HA\train/train_facts.txt

% Welcome to the WILL ILP/SRL systems.


% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.
% Reading background theory from dir: null
% Load '../background.txt'.

% Switching to VarIndicator = uppercase.

% Switching to standard-logic notation for variables; previous setting = uppercase

% Switching to VarIndicator = lowercase.

***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = lowercase *****


***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = lowercase *****

% [ LazyGroundClauseIndex ]  Building full index for mode/1 with 1 assertions.
% LoadAllModes() called.  Currently loaded modes: []

% Switching to Prolog notation for variables; previous setting = lowercase

% Switching to VarIndicator = uppercase.

% Switching to VarIndicator = lowercase.

% Switching to Prolog notation for variables; previous setting = lowercase

% Switching to VarIndicator = uppercase.

% Switching to VarIndicator = lowercase.

% Switching to Prolog notation for variables; previous setting = lowercase

% Switching to VarIndicator = uppercase.

% Switching to VarIndicator = lowercase.

% Switching to Prolog notation for variables; previous setting = lowercase

% Switching to VarIndicator = uppercase.

% Switching to VarIndicator = lowercase.
% [ LazyGroundClauseIndex ]  Building full index for sameAs/2 with 2 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for exp/3.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for log/3.
% LoadAllLibraries() called.  Currently loaded libraries: [listsInLogic, differentInLogic, modes_arithmeticInLogic, inlines_comparisonInLogic, modes_listsInLogic, inlines_differentInLogic, modes_differentInLogic, arithmeticInLogic, inlines_listsInLogic, modes_comparisonInLogic, comparisonInLogic, inlines_arithmeticInLogic]

%  Read the facts.
%  Have read 30 facts.
% Have read 7 examples from 'data\Toy_HA\train' [data\Toy_HA\train/train*].
% Have read 8 examples from 'data\Toy_HA\train' [data\Toy_HA\train/train*].

%  LearnOneClause initialized.

% The outer looper has been created.

% Initializing the ILP inner looper.

% NEW target:                 HA(a)
%  targetPred:                HA/1
%  targetArgTypes:            signature = [Const], types = [+patient]
%  targets:                   [HA(a)]
%  targetPredicates:          [HA/1]
%  targetArgSpecs:            [[a[+patient]]]
%  variablesInTargets:        [[a]]

% Started collecting constants

% Collecting the types of constants.

%   *** WARNING ***  Constant '160' is already marked as being of types = [value1];
%          type = 'value' may be added if not already known.
%  PredicateName = 'Chol', from 'Chol(P2, 160)',
%  which has types = [signature = [Const, Const], types = [+patient, #value]]
%   Other warnings with this predicate and this new type are not reported in order to keep this printout small.  Use dontComplainAboutMultipleTypes to override.

% Looking at the training examples to see if any types of new constants can be inferred.
% Time to collect constants: 0 seconds
% Time to collect examples: 0 seconds

% Read 7 pos examples and 8 neg examples.
% Time to init learnOneClause: 15 milliseconds
% Old dirnull
Setting model dir

% Have 7 'raw' positive examples and kept 7.
% Have 8 'raw' negative examples and kept 8.

% processing backup's for HA
%  POS EX = 7
%  NEG EX = 8

% Memory usage by WILLSetup (just counts # targets?):
%  |backupPosExamples| = 1
%  |backupNegExamples| = 1
%  |predicatesAsFacts| = 0
%  |addedToFactBase|   = 0
data\Toy_HA\train/models/
File: data\Toy_HA\train/advice.txt doesnt exist.Hence no advice loaded
% Learning 3 trees in this iteration for HA

% Learn model for: HA
% Kept 7 of the 7 positive examples.
% Kept 8 of the 8 negative examples.
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.24888888888888888
Set score:0.0025
% Dataset size: 15
Computing probabilities
prob time:1 milliseconds
No hidden examples for : HA
Time to build dataset: 21 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.24888888888888888
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 0 1 4 5 6 9 10 11 13 14
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% LearnOneClause Parameters:
%   Targets (1):
%    HA(+patient)
%  Modes (38):
%    BP(+patient, #value1),
%    Chol(+patient, #value),
%    addList(+willList, #willNumber),
%    multiplyList(+willList, #willNumber),
%    abs(+willNumber, &willNumber),
%    minus(+willNumber, &willNumber),
%    minus(+willNumber, +willNumber, &willNumber),
%    plus(+willNumber, +willNumber, &willNumber),
%    mult(+willNumber, +willNumber, &willNumber),
%    div(+willNumber, +willNumber, &willNumber),
%    allNumbers(+willList),
%    positiveNumber(+willNumber),
%    negativeNumber(+willNumber),
%    in0toDot001(+willNumber),
%    in0toDot01(+willNumber),
%    in0toDot1(+willNumber),
%    in0to1(+willNumber),
%    in0to10(+willNumber),
%    in0to100(+willNumber),
%    in0to1000(+willNumber),
%    equalWithTolerance(+willNumber, +willNumber, &willNumber),
%    greaterOrEqualDifference(+willNumber, +willNumber, &willNumber),
%    smallerOrEqualDifference(+willNumber, +willNumber, &willNumber),
%    isaEqualTolerance(+willNumber),
%    lessThan(+willNumber, +willNumber),
%    greaterThan(+willNumber, +willNumber),
%    lessThanOrEqual(+willNumber, +willNumber),
%    greaterThanOrEqual(+willNumber, +willNumber),
%    inBetweenOO(+willNumber, +willNumber, +willNumber),
%    inBetweenCO(+willNumber, +willNumber, +willNumber),
%    inBetweenOC(+willNumber, +willNumber, +willNumber),
%    inBetweenCC(+willNumber, +willNumber, +willNumber),
%    memberOfList(+willAnything, +willList),
%    firstInList(+willList, &willAnything),
%    restOfList(+willList, &willList),
%    positionInList(+willAnything, +willList, &willNumber),
%    nthInList(+willNumber, +willList, &willAnything),
%    lengthOfList(+willList, &willNumber)

% target           = HA(a)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  HA(_).  [covers 15.0/15.0 pos, 0.0/0.0 neg]
% Most-general root: HA(_).  [covers 15.0/15.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'HA(_).  [covers 15.0/15.0 pos, 0.0/0.0 neg]' score=-Infinity
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for BP/2.
% [ LazyGroundClauseIndex ]  Building full index for BP/2 with 16 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for Chol/2.
% [ LazyGroundClauseIndex ]  Building full index for Chol/2 with 16 assertions.
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 19 items to OPEN for evaluation and possible insertion.
% Have created 19 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 150) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 160) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 130) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 120) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 90) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 135) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 100) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 110) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 80) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 95) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 239) => HA(a).  [covers 2.0/15.0 pos, 0.0/0.0 neg]
%     Score = -3.295456 (regressionFit = 3.295455, penalties=1.03E-6) for clause:  Chol(a, 160) => HA(a).  [covers 4.0/15.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -3.295456): Chol(a, 160) => HA(a).  [covers 4.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 200) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 210) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 225) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 220) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 230) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 180) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 150) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]

% The best node found: Chol(a, 160) => HA(a).  [covers 4.0/15.0 pos, 0.0/0.0 neg]

% The best node found: Chol(a, 160) => HA(a).  [covers 4.0/15.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: Chol(a, 160) => HA(a).  [covers 4.0/15.0 pos, 0.0/0.0 neg]
Comparing variance: 0.18750000000000006 to score=0.0025 #egs=4.0
Comparing variance: 0.2314049586776858 to score=0.0025 #egs=11.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 4.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 11.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0.231405)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0.231405) into the LAST position (#1) in the search queue.

% Time for loop #1: 56 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 12

% On cycle #1, the best clause found is:
%      Chol(a, 160) => HA(a).  [covers 4.0/15.0 pos, 0.0/0.0 neg]
% This clause covers 4 positive examples, of which 4 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 0 1 2 3 4 5 6 7 8 9
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = HA(a)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  HA(_).  [covers 11.0/11.0 pos, 0.0/0.0 neg]
% Most-general root: HA(_).  [covers 11.0/11.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'HA(_).  [covers 11.0/11.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 19 items to OPEN for evaluation and possible insertion.
% Have created 19 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 150) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 130) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 120) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 90) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 270) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 170) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 135) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 100) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 110) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 80) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 239) => HA(a).  [covers 2.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 200) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 210) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 80) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 90) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 225) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 220) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 230) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 180) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null
Created a leaf under (Chol(a, 160) => HA(a))

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #1 @ 11:19:34 11/20/18.  [Using 2,645,168 memory cells.]  %%%%%


% FOR HA(a):
%   if ( Chol(a, 160) )
%   then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return 0.22178529873587596;  // std dev = 0.481, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */


% Clauses:

HA(a, 0.6081489350995122) :- 
     Chol(a, 160), 
     !. // Clause #1.

HA(a, 0.22178529873587596) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_Chol(A, 160) ^
   ! => 
   HA(A, 0.6081489350995122). // Flattened version of clause #1.

flattened_! => 
   HA(Underscore, 0.22178529873587596). // Flattened version of clause #2.


% The unique flattened literals:
%   Chol(A, 160)

% Saving model in: data\Toy_HA\train/models/bRDNs/HA.model.ckpt
% Time taken to learn 1 trees is 188 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.2314049586776858
Set score:0.0025
% Only 15 out of 15 converged.
% Kept 7 of the 7 positive examples.
% Kept 8 of the 8 negative examples.
% Dataset size: 15
Computing probabilities
prob time:16 milliseconds
No hidden examples for : HA
Time to build dataset: 16 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.24028699700791556
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 7 positive seeds: 3 6 8 9 11 13 14
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = HA(a)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  HA(_).  [covers 15.0/15.0 pos, 0.0/0.0 neg]
% Most-general root: HA(_).  [covers 15.0/15.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'HA(_).  [covers 15.0/15.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 260) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 90) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 170) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 135) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 110) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 80) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 95) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -3.295456 (regressionFit = 3.295455, penalties=1.03E-6) for clause:  Chol(a, 160) => HA(a).  [covers 4.0/15.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -3.295456): Chol(a, 160) => HA(a).  [covers 4.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 210) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 90) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 225) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 230) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 180) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 150) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]

% The best node found: Chol(a, 160) => HA(a).  [covers 4.0/15.0 pos, 0.0/0.0 neg]

% The best node found: Chol(a, 160) => HA(a).  [covers 4.0/15.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: Chol(a, 160) => HA(a).  [covers 4.0/15.0 pos, 0.0/0.0 neg]
Comparing variance: 0.18750000000000006 to score=0.0025 #egs=4.0
Comparing variance: 0.23140495867768582 to score=0.0025 #egs=11.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 4.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 11.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0.231405)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0.231405) into the LAST position (#1) in the search queue.

% Time for loop #1: 21 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 12

% On cycle #1, the best clause found is:
%      Chol(a, 160) => HA(a).  [covers 4.0/15.0 pos, 0.0/0.0 neg]
% This clause covers 4 positive examples, of which 4 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 0 1 2 3 4 5 6 7 8 9
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = HA(a)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  HA(_).  [covers 11.0/11.0 pos, 0.0/0.0 neg]
% Most-general root: HA(_).  [covers 11.0/11.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'HA(_).  [covers 11.0/11.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 19 items to OPEN for evaluation and possible insertion.
% Have created 19 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 150) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 130) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 120) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 90) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 270) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 170) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 135) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 100) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 110) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 80) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 239) => HA(a).  [covers 2.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 200) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 210) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 80) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 90) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 225) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 220) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 230) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 180) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null
Created a leaf under (Chol(a, 160) => HA(a))

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #2 @ 11:19:34 11/20/18.  [Using 2,655,512 memory cells.]  %%%%%


% FOR HA(a):
%   if ( Chol(a, 160) )
%   then return 0.5170719622367217;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return 0.19258789115538322;  // std dev = 0.481, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */


% Clauses:

HA(a, 0.5170719622367217) :- 
     Chol(a, 160), 
     !. // Clause #1.

HA(a, 0.19258789115538322) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_Chol(A, 160) ^
   ! => 
   HA(A, 0.5170719622367217). // Flattened version of clause #1.

flattened_! => 
   HA(Underscore, 0.19258789115538322). // Flattened version of clause #2.


% The unique flattened literals:
%   Chol(A, 160)

% Saving model in: data\Toy_HA\train/models/bRDNs/HA.model.ckpt
% Time taken to learn 2 trees is 288 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.23140495867768587
Set score:0.0025
% Only 15 out of 15 converged.
% Kept 7 of the 7 positive examples.
% Kept 8 of the 8 negative examples.
% Dataset size: 15
Computing probabilities
prob time:0 seconds
No hidden examples for : HA
Time to build dataset: 0 seconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.2318257897758978
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 0 1 3 4 5 7 9 10 13 14
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = HA(a)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  HA(_).  [covers 15.0/15.0 pos, 0.0/0.0 neg]
% Most-general root: HA(_).  [covers 15.0/15.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'HA(_).  [covers 15.0/15.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 18 items to OPEN for evaluation and possible insertion.
% Have created 18 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 150) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 160) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 260) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 130) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 120) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 270) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 135) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 100) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 80) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 95) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 239) => HA(a).  [covers 2.0/15.0 pos, 0.0/0.0 neg]
%     Score = -3.295456 (regressionFit = 3.295455, penalties=1.03E-6) for clause:  Chol(a, 160) => HA(a).  [covers 4.0/15.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -3.295456): Chol(a, 160) => HA(a).  [covers 4.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 200) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 80) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 225) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 220) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 180) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 150) => HA(a).  [covers 1.0/15.0 pos, 0.0/0.0 neg]

% The best node found: Chol(a, 160) => HA(a).  [covers 4.0/15.0 pos, 0.0/0.0 neg]

% The best node found: Chol(a, 160) => HA(a).  [covers 4.0/15.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: Chol(a, 160) => HA(a).  [covers 4.0/15.0 pos, 0.0/0.0 neg]
Comparing variance: 0.18750000000000003 to score=0.0025 #egs=4.0
Comparing variance: 0.23140495867768607 to score=0.0025 #egs=11.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 4.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 11.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0.231405)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0.231405) into the LAST position (#1) in the search queue.

% Time for loop #1: 21 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 12

% On cycle #1, the best clause found is:
%      Chol(a, 160) => HA(a).  [covers 4.0/15.0 pos, 0.0/0.0 neg]
% This clause covers 4 positive examples, of which 4 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 0 1 2 3 4 5 6 7 8 9
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = HA(a)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  HA(_).  [covers 11.0/11.0 pos, 0.0/0.0 neg]
% Most-general root: HA(_).  [covers 11.0/11.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'HA(_).  [covers 11.0/11.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 19 items to OPEN for evaluation and possible insertion.
% Have created 19 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 150) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 130) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 120) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 90) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 270) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 170) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 135) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 100) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 110) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  BP(a, 80) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 239) => HA(a).  [covers 2.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 200) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 210) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 80) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 90) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 225) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 220) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 230) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 180) => HA(a).  [covers 1.0/11.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null
Created a leaf under (Chol(a, 160) => HA(a))

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #3 @ 11:19:34 11/20/18.  [Using 2,673,800 memory cells.]  %%%%%


% FOR HA(a):
%   if ( Chol(a, 160) )
%   then return 0.41257245288266;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return 0.16352953408429413;  // std dev = 0.481, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */


% Clauses:

HA(a, 0.41257245288266) :- 
     Chol(a, 160), 
     !. // Clause #1.

HA(a, 0.16352953408429413) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_Chol(A, 160) ^
   ! => 
   HA(A, 0.41257245288266). // Flattened version of clause #1.

flattened_! => 
   HA(Underscore, 0.16352953408429413). // Flattened version of clause #2.


% The unique flattened literals:
%   Chol(A, 160)

% Saving model in: data\Toy_HA\train/models/bRDNs/HA.model.ckpt


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for HA.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).

logPrior(-1.8).
HA(a, total) :- // A general accessor. 
   HA(a, 1000000, total), !.
HA(a, total) :- waitHere("This should not fail", HA(a, total)).

HA(a, treesToUse, total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(logPrior),
   getScore_HA_tree1(a, treesToUse, total1),
   getScore_HA_tree2(a, treesToUse, total2),
   getScore_HA_tree3(a, treesToUse, total3),
   total is logPrior + total1 + total2 + total3,
   !.
HA(a, treesToUse, total) :- waitHere("This should not fail", HA(a, treesToUse, total)).

getScore_HA_tree1(a, treesToUse, 0.0) :- 1 > treesToUse, !.
getScore_HA_tree1(a, treesToUse, total1) :- HA_tree1(a, total), stepLength_tree1(stepLen), total1 is total * stepLen.

getScore_HA_tree2(a, treesToUse, 0.0) :- 2 > treesToUse, !.
getScore_HA_tree2(a, treesToUse, total2) :- HA_tree2(a, total), stepLength_tree2(stepLen), total2 is total * stepLen.

getScore_HA_tree3(a, treesToUse, 0.0) :- 3 > treesToUse, !.
getScore_HA_tree3(a, treesToUse, total3) :- HA_tree3(a, total), stepLength_tree3(stepLen), total3 is total * stepLen.

flattenedLiteralsInThisSetOfTrees(HA, 1, [
   Chol(A, 160)]).
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:2.157455663412252
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 9 positive seeds: 2 6 7 13 26 27 29 42 44
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = HA(a)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  HA(_).  [covers 45.0/45.0 pos, 0.0/0.0 neg]
% Most-general root: HA(_).  [covers 45.0/45.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'HA(_).  [covers 45.0/45.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 13 items to OPEN for evaluation and possible insertion.
% Have created 13 valid-on-seeds descendants.
%     Score = -90.290883 (regressionFit = 90.290882, penalties=1.03E-6) for clause:  BP(a, 250) => HA(a).  [covers 3.0/45.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -90.290883): BP(a, 250) => HA(a).  [covers 3.0/45.0 pos, 0.0/0.0 neg]
%     Score = -88.301487 (regressionFit = 88.301486, penalties=1.03E-6) for clause:  BP(a, 90) => HA(a).  [covers 3.0/45.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -88.301487): BP(a, 90) => HA(a).  [covers 3.0/45.0 pos, 0.0/0.0 neg]
%     Score = -91.254517 (regressionFit = 91.254516, penalties=1.03E-6) for clause:  BP(a, 270) => HA(a).  [covers 3.0/45.0 pos, 0.0/0.0 neg]
%     Score = -91.254517 (regressionFit = 91.254516, penalties=1.03E-6) for clause:  BP(a, 80) => HA(a).  [covers 3.0/45.0 pos, 0.0/0.0 neg]
%     Score = -91.254517 (regressionFit = 91.254516, penalties=1.03E-6) for clause:  BP(a, 110) => HA(a).  [covers 3.0/45.0 pos, 0.0/0.0 neg]
%     Score = -89.402193 (regressionFit = 89.402192, penalties=1.03E-6) for clause:  BP(a, 70) => HA(a).  [covers 3.0/45.0 pos, 0.0/0.0 neg]
%     Score = -91.254517 (regressionFit = 91.254516, penalties=1.03E-6) for clause:  BP(a, 95) => HA(a).  [covers 3.0/45.0 pos, 0.0/0.0 neg]
%     Score = -88.977274 (regressionFit = 88.977273, penalties=1.03E-6) for clause:  Chol(a, 160) => HA(a).  [covers 12.0/45.0 pos, 0.0/0.0 neg]
%     Score = -88.301487 (regressionFit = 88.301486, penalties=1.03E-6) for clause:  Chol(a, 210) => HA(a).  [covers 3.0/45.0 pos, 0.0/0.0 neg]
%     Score = -91.254517 (regressionFit = 91.254516, penalties=1.03E-6) for clause:  Chol(a, 80) => HA(a).  [covers 3.0/45.0 pos, 0.0/0.0 neg]
%     Score = -91.254517 (regressionFit = 91.254516, penalties=1.03E-6) for clause:  Chol(a, 180) => HA(a).  [covers 3.0/45.0 pos, 0.0/0.0 neg]
%     Score = -91.254517 (regressionFit = 91.254516, penalties=1.03E-6) for clause:  Chol(a, 230) => HA(a).  [covers 3.0/45.0 pos, 0.0/0.0 neg]
%     Score = -91.254517 (regressionFit = 91.254516, penalties=1.03E-6) for clause:  Chol(a, 150) => HA(a).  [covers 3.0/45.0 pos, 0.0/0.0 neg]

% The best node found: BP(a, 90) => HA(a).  [covers 3.0/45.0 pos, 0.0/0.0 neg]

% The best node found: BP(a, 90) => HA(a).  [covers 3.0/45.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: BP(a, 90) => HA(a).  [covers 3.0/45.0 pos, 0.0/0.0 neg]
Comparing variance: 0.0 to score=0.0025 #egs=3.0
Comparing variance: 2.1024163242853313 to score=0.0025 #egs=42.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 3.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 42.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-2.102416)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -2.102416) into the LAST position (#1) in the search queue.

% Time for loop #1: 37 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 12

% On cycle #1, the best clause found is:
%      BP(a, 90) => HA(a).  [covers 3.0/45.0 pos, 0.0/0.0 neg]
% This clause covers 3 positive examples, of which 3 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 7 positive seeds: 3 10 27 28 30 33 40
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = HA(a)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  HA(_).  [covers 42.0/42.0 pos, 0.0/0.0 neg]
% Most-general root: HA(_).  [covers 42.0/42.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'HA(_).  [covers 42.0/42.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 12 items to OPEN for evaluation and possible insertion.
% Have created 12 valid-on-seeds descendants.
%     Score = -80.317663 (regressionFit = 80.317662, penalties=1.03E-6) for clause:  BP(a, 260) => HA(a).  [covers 3.0/42.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -80.317663): BP(a, 260) => HA(a).  [covers 3.0/42.0 pos, 0.0/0.0 neg]
%     Score = -83.423189 (regressionFit = 83.423188, penalties=1.03E-6) for clause:  BP(a, 110) => HA(a).  [covers 3.0/42.0 pos, 0.0/0.0 neg]
%     Score = -83.423189 (regressionFit = 83.423188, penalties=1.03E-6) for clause:  BP(a, 95) => HA(a).  [covers 3.0/42.0 pos, 0.0/0.0 neg]
%     Score = -78.166080 (regressionFit = 78.166079, penalties=1.03E-6) for clause:  BP(a, 150) => HA(a).  [covers 3.0/42.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -78.166080): BP(a, 150) => HA(a).  [covers 3.0/42.0 pos, 0.0/0.0 neg]
%     Score = -80.317663 (regressionFit = 80.317662, penalties=1.03E-6) for clause:  BP(a, 250) => HA(a).  [covers 3.0/42.0 pos, 0.0/0.0 neg]
%     Score = -78.166080 (regressionFit = 78.166079, penalties=1.03E-6) for clause:  BP(a, 120) => HA(a).  [covers 3.0/42.0 pos, 0.0/0.0 neg]
%     Score = -83.423189 (regressionFit = 83.423188, penalties=1.03E-6) for clause:  BP(a, 80) => HA(a).  [covers 3.0/42.0 pos, 0.0/0.0 neg]
%     Score = -76.950001 (regressionFit = 76.950000, penalties=1.03E-6) for clause:  Chol(a, 160) => HA(a).  [covers 12.0/42.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -76.950001): Chol(a, 160) => HA(a).  [covers 12.0/42.0 pos, 0.0/0.0 neg]
%     Score = -83.423189 (regressionFit = 83.423188, penalties=1.03E-6) for clause:  Chol(a, 230) => HA(a).  [covers 3.0/42.0 pos, 0.0/0.0 neg]
%     Score = -83.423189 (regressionFit = 83.423188, penalties=1.03E-6) for clause:  Chol(a, 150) => HA(a).  [covers 3.0/42.0 pos, 0.0/0.0 neg]
%     Score = -66.341439 (regressionFit = 66.341438, penalties=1.03E-6) for clause:  Chol(a, 239) => HA(a).  [covers 6.0/42.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -66.341439): Chol(a, 239) => HA(a).  [covers 6.0/42.0 pos, 0.0/0.0 neg]
%     Score = -83.423189 (regressionFit = 83.423188, penalties=1.03E-6) for clause:  Chol(a, 180) => HA(a).  [covers 3.0/42.0 pos, 0.0/0.0 neg]

% The best node found: Chol(a, 239) => HA(a).  [covers 6.0/42.0 pos, 0.0/0.0 neg]

% The best node found: Chol(a, 239) => HA(a).  [covers 6.0/42.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -2.102.
% Will extend: Chol(a, 239) => HA(a).  [covers 6.0/42.0 pos, 0.0/0.0 neg]
Comparing variance: 1.1842378929335002E-15 to score=0.0025 #egs=6.0
Comparing variance: 1.8428177093351492 to score=0.0025 #egs=36.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 6.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 36.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-1.842818)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -1.842818) into the LAST position (#1) in the search queue.

% Time for loop #2: 31 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 12

% On cycle #2, the best clause found is:
%      Chol(a, 239) => HA(a).  [covers 6.0/42.0 pos, 0.0/0.0 neg]
% This clause covers 6 positive examples, of which 6 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 1 3 5 12 13 19 21 23 28 31
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = HA(a)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  HA(_).  [covers 36.0/36.0 pos, 0.0/0.0 neg]
% Most-general root: HA(_).  [covers 36.0/36.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #3, bodyLen=0] 'HA(_).  [covers 36.0/36.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants.
%     Score = -54.931287 (regressionFit = 54.931286, penalties=1.03E-6) for clause:  BP(a, 250) => HA(a).  [covers 3.0/36.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -54.931287): BP(a, 250) => HA(a).  [covers 3.0/36.0 pos, 0.0/0.0 neg]
%     Score = -52.366863 (regressionFit = 52.366861, penalties=1.03E-6) for clause:  BP(a, 130) => HA(a).  [covers 3.0/36.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -52.366863): BP(a, 130) => HA(a).  [covers 3.0/36.0 pos, 0.0/0.0 neg]
%     Score = -63.488901 (regressionFit = 63.488900, penalties=1.03E-6) for clause:  BP(a, 170) => HA(a).  [covers 3.0/36.0 pos, 0.0/0.0 neg]
%     Score = -54.931287 (regressionFit = 54.931286, penalties=1.03E-6) for clause:  BP(a, 160) => HA(a).  [covers 3.0/36.0 pos, 0.0/0.0 neg]
%     Score = -63.488901 (regressionFit = 63.488900, penalties=1.03E-6) for clause:  BP(a, 100) => HA(a).  [covers 3.0/36.0 pos, 0.0/0.0 neg]
%     Score = -62.141756 (regressionFit = 62.141755, penalties=1.03E-6) for clause:  BP(a, 70) => HA(a).  [covers 3.0/36.0 pos, 0.0/0.0 neg]
%     Score = -63.488901 (regressionFit = 63.488900, penalties=1.03E-6) for clause:  BP(a, 95) => HA(a).  [covers 3.0/36.0 pos, 0.0/0.0 neg]
%     Score = -63.488901 (regressionFit = 63.488900, penalties=1.03E-6) for clause:  BP(a, 270) => HA(a).  [covers 3.0/36.0 pos, 0.0/0.0 neg]
%     Score = -43.875001 (regressionFit = 43.875000, penalties=1.03E-6) for clause:  Chol(a, 160) => HA(a).  [covers 12.0/36.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -43.875001): Chol(a, 160) => HA(a).  [covers 12.0/36.0 pos, 0.0/0.0 neg]
%     Score = -52.366863 (regressionFit = 52.366861, penalties=1.03E-6) for clause:  Chol(a, 200) => HA(a).  [covers 3.0/36.0 pos, 0.0/0.0 neg]
%     Score = -63.488901 (regressionFit = 63.488900, penalties=1.03E-6) for clause:  Chol(a, 90) => HA(a).  [covers 3.0/36.0 pos, 0.0/0.0 neg]
%     Score = -63.488901 (regressionFit = 63.488900, penalties=1.03E-6) for clause:  Chol(a, 220) => HA(a).  [covers 3.0/36.0 pos, 0.0/0.0 neg]
%     Score = -63.488901 (regressionFit = 63.488900, penalties=1.03E-6) for clause:  Chol(a, 150) => HA(a).  [covers 3.0/36.0 pos, 0.0/0.0 neg]
%     Score = -63.488901 (regressionFit = 63.488900, penalties=1.03E-6) for clause:  Chol(a, 80) => HA(a).  [covers 3.0/36.0 pos, 0.0/0.0 neg]

% The best node found: Chol(a, 160) => HA(a).  [covers 12.0/36.0 pos, 0.0/0.0 neg]

% The best node found: Chol(a, 160) => HA(a).  [covers 12.0/36.0 pos, 0.0/0.0 neg]

% Expanding node at Level 2 with score = -1.843.
% Will extend: Chol(a, 160) => HA(a).  [covers 12.0/36.0 pos, 0.0/0.0 neg]
Comparing variance: 1.687499999999998 to score=0.0025 #egs=12.0
Comparing variance: 0.9843749999999997 to score=0.0025 #egs=24.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 12.0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-1.687500)
%         ILP node to extend: Chol(a, 160) => HA(a).  [covers 12.0/36.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -1.687500) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 24.0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-0.984375)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -0.984375) into the LAST position (#2) in the search queue.

% Time for loop #3: 37 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 12

% On cycle #3, the best clause found is:
%      Chol(a, 160) => HA(a).  [covers 12.0/36.0 pos, 0.0/0.0 neg]
% This clause covers 12 positive examples, of which 12 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'Chol(a, 160) => HA(a).  [covers 12.0/12.0 pos, 0.0/0.0 neg]'
%     Score = -43.875001 (regressionFit = 43.875000, penalties=1.03E-6) for clause:  Chol(a, 160) => HA(a).  [covers 12.0/12.0 pos, 0.0/0.0 neg]

% Have these 10 positive seeds: 0 1 2 3 4 7 8 9 10 11
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #4, bodyLen=1] 'Chol(a, 160) => HA(a).  [covers 12.0/12.0 pos, 0.0/0.0 neg]' score=-43.87500102999997
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -18.000002 (regressionFit = 18.000000, penalties=2.0300000000000005E-6) for clause:  Chol(a, 160) ^ BP(a, 160) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -18.000002): Chol(a, 160) ^ BP(a, 160) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]
%     Score = -18.000002 (regressionFit = 18.000000, penalties=2.0500000000000003E-6) for clause:  Chol(a, 160) ^ BP(a, 250) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]
%     Score = -18.000002 (regressionFit = 18.000000, penalties=2.0500000000000003E-6) for clause:  Chol(a, 160) ^ BP(a, 260) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]
%     Score = -0.000002 (regressionFit = -6.43929e-15, penalties=2.0500000000000003E-6) for clause:  Chol(a, 160) ^ BP(a, 70) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000002): Chol(a, 160) ^ BP(a, 70) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]

% The best node found: Chol(a, 160) ^ BP(a, 70) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]

% The best node found: Chol(a, 160) ^ BP(a, 70) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]

% Expanding node at Level 3 with score = -1.687.
% Will extend: Chol(a, 160) ^ BP(a, 70) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]
Comparing variance: 2.220446049250313E-16 to score=0.0025 #egs=3.0
Comparing variance: -7.894919286223335E-16 to score=0.0025 #egs=9.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 3.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #4: 16 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 12

% On cycle #4, the best clause found is:
%      Chol(a, 160) ^ BP(a, 70) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]
% This clause covers 3 positive examples, of which 3 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 0 8 9 10 14 15 17 18 20 21
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = HA(a)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  HA(_).  [covers 24.0/24.0 pos, 0.0/0.0 neg]
% Most-general root: HA(_).  [covers 24.0/24.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #5, bodyLen=0] 'HA(_).  [covers 24.0/24.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 14 items to OPEN for evaluation and possible insertion.
% Have created 14 valid-on-seeds descendants.
%     Score = -0.000001 (regressionFit = -2.66454e-15, penalties=1.03E-6) for clause:  BP(a, 130) => HA(a).  [covers 3.0/24.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000001): BP(a, 130) => HA(a).  [covers 3.0/24.0 pos, 0.0/0.0 neg]
%     Score = -23.142858 (regressionFit = 23.142857, penalties=1.03E-6) for clause:  BP(a, 270) => HA(a).  [covers 3.0/24.0 pos, 0.0/0.0 neg]
%     Score = -23.142858 (regressionFit = 23.142857, penalties=1.03E-6) for clause:  BP(a, 170) => HA(a).  [covers 3.0/24.0 pos, 0.0/0.0 neg]
%     Score = -23.142858 (regressionFit = 23.142857, penalties=1.03E-6) for clause:  BP(a, 80) => HA(a).  [covers 3.0/24.0 pos, 0.0/0.0 neg]
%     Score = -23.142858 (regressionFit = 23.142857, penalties=1.03E-6) for clause:  BP(a, 95) => HA(a).  [covers 3.0/24.0 pos, 0.0/0.0 neg]
%     Score = -23.142858 (regressionFit = 23.142857, penalties=1.03E-6) for clause:  BP(a, 100) => HA(a).  [covers 3.0/24.0 pos, 0.0/0.0 neg]
%     Score = -23.142858 (regressionFit = 23.142857, penalties=1.03E-6) for clause:  BP(a, 110) => HA(a).  [covers 3.0/24.0 pos, 0.0/0.0 neg]
%     Score = -0.000001 (regressionFit = -2.66454e-15, penalties=1.03E-6) for clause:  Chol(a, 200) => HA(a).  [covers 3.0/24.0 pos, 0.0/0.0 neg]
%     Score = -23.142858 (regressionFit = 23.142857, penalties=1.03E-6) for clause:  Chol(a, 80) => HA(a).  [covers 3.0/24.0 pos, 0.0/0.0 neg]
%     Score = -23.142858 (regressionFit = 23.142857, penalties=1.03E-6) for clause:  Chol(a, 90) => HA(a).  [covers 3.0/24.0 pos, 0.0/0.0 neg]
%     Score = -23.142858 (regressionFit = 23.142857, penalties=1.03E-6) for clause:  Chol(a, 180) => HA(a).  [covers 3.0/24.0 pos, 0.0/0.0 neg]
%     Score = -23.142858 (regressionFit = 23.142857, penalties=1.03E-6) for clause:  Chol(a, 150) => HA(a).  [covers 3.0/24.0 pos, 0.0/0.0 neg]
%     Score = -23.142858 (regressionFit = 23.142857, penalties=1.03E-6) for clause:  Chol(a, 220) => HA(a).  [covers 3.0/24.0 pos, 0.0/0.0 neg]
%     Score = -23.142858 (regressionFit = 23.142857, penalties=1.03E-6) for clause:  Chol(a, 230) => HA(a).  [covers 3.0/24.0 pos, 0.0/0.0 neg]

% The best node found: BP(a, 130) => HA(a).  [covers 3.0/24.0 pos, 0.0/0.0 neg]

% The best node found: BP(a, 130) => HA(a).  [covers 3.0/24.0 pos, 0.0/0.0 neg]

% Expanding node at Level 3 with score = -0.984.
% Will extend: BP(a, 130) => HA(a).  [covers 3.0/24.0 pos, 0.0/0.0 neg]
Comparing variance: 0.0 to score=0.0025 #egs=3.0
Comparing variance: -1.2688263138573217E-16 to score=0.0025 #egs=21.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 3.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #5: 30 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 12

% On cycle #5, the best clause found is:
%      BP(a, 130) => HA(a).  [covers 3.0/24.0 pos, 0.0/0.0 neg]
% This clause covers 3 positive examples, of which 3 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree Combined @ 11:19:34 11/20/18.  [Using 2,704,216 memory cells.]  %%%%%


% FOR HA(a):
%   if ( BP(a, 90) )
%   then return 2.4869936330664624;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( Chol(a, 239) )
%   | then return 2.486993633066462;  // std dev = 8.43e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( Chol(a, 160) )
%   | | then if ( BP(a, 70) )
%   | | | then return -0.712206649781106;  // std dev = 2.58e-08, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 2.287793350218894;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( BP(a, 130) )
%   | | | then return 2.4869936330664624;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.513006366933538;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */


% Clauses:

HA(a, 2.4869936330664624) :- 
     BP(a, 90), 
     !. // Clause #1.

HA(a, 2.486993633066462) :- 
     Chol(a, 239), 
     !. // Clause #2.

HA(a, -0.712206649781106) :- 
     Chol(a, 160), 
     BP(a, 70), 
     !. // Clause #3.

HA(a, 2.287793350218894) :- 
     Chol(a, 160), 
     !. // Clause #4.

HA(a, 2.4869936330664624) :- 
     BP(a, 130), 
     !. // Clause #5.

HA(a, -0.513006366933538) :- !. // Clause #6.


% The flattened versions of these clauses:

flattened_BP(A, 90) ^
   ! => 
   HA(A, 2.4869936330664624). // Flattened version of clause #1.

flattened_Chol(A, 239) ^
   ! => 
   HA(A, 2.486993633066462). // Flattened version of clause #2.

flattened_Chol(A, 160) ^
   BP(A, 70) ^
   ! => 
   HA(A, -0.712206649781106). // Flattened version of clause #3.

flattened_Chol(A, 160) ^
   ! => 
   HA(A, 2.287793350218894). // Flattened version of clause #4.

flattened_BP(A, 130) ^
   ! => 
   HA(A, 2.4869936330664624). // Flattened version of clause #5.

flattened_! => 
   HA(Underscore, -0.513006366933538). // Flattened version of clause #6.


% The unique flattened literals:
%   BP(A, 130)
%   BP(A, 70)
%   Chol(A, 160)
%   BP(A, 90)
%   Chol(A, 239)

% Time taken to learn model for 'HA': 624 milliseconds.
% Saving model in: data\Toy_HA\train/models/bRDNs/HA.model
cached groundings hit: 0
Misses: 0

% Total learning time (3 trees): 922 milliseconds.

% Starting an INFERENCE run of bRDN.


// Closed by a createDribble call with file = data\Toy_HA\train/models/test_learnPlusInfer_dribble.txt
