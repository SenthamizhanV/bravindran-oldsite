% Running on host: BL-SOIC-F4CHPD2

% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.

% Calling ILPouterLoop from createRegressionOuterLooper.

% getInputArgWithDefaultValue: args=[C:\Users\sxd170431\Desktop\Disc_data\train/train_pos.txt, C:\Users\sxd170431\Desktop\Disc_data\train/train_neg.txt, C:\Users\sxd170431\Desktop\Disc_data\train/train_bk.txt, C:\Users\sxd170431\Desktop\Disc_data\train/train_facts_disc.txt]
%  for N=0: args[N]=C:\Users\sxd170431\Desktop\Disc_data\train/train_pos.txt

% getInputArgWithDefaultValue: args=[C:\Users\sxd170431\Desktop\Disc_data\train/train_pos.txt, C:\Users\sxd170431\Desktop\Disc_data\train/train_neg.txt, C:\Users\sxd170431\Desktop\Disc_data\train/train_bk.txt, C:\Users\sxd170431\Desktop\Disc_data\train/train_facts_disc.txt]
%  for N=1: args[N]=C:\Users\sxd170431\Desktop\Disc_data\train/train_neg.txt

% getInputArgWithDefaultValue: args=[C:\Users\sxd170431\Desktop\Disc_data\train/train_pos.txt, C:\Users\sxd170431\Desktop\Disc_data\train/train_neg.txt, C:\Users\sxd170431\Desktop\Disc_data\train/train_bk.txt, C:\Users\sxd170431\Desktop\Disc_data\train/train_facts_disc.txt]
%  for N=2: args[N]=C:\Users\sxd170431\Desktop\Disc_data\train/train_bk.txt

% getInputArgWithDefaultValue: args=[C:\Users\sxd170431\Desktop\Disc_data\train/train_pos.txt, C:\Users\sxd170431\Desktop\Disc_data\train/train_neg.txt, C:\Users\sxd170431\Desktop\Disc_data\train/train_bk.txt, C:\Users\sxd170431\Desktop\Disc_data\train/train_facts_disc.txt]
%  for N=3: args[N]=C:\Users\sxd170431\Desktop\Disc_data\train/train_facts_disc.txt

% Welcome to the WILL ILP/SRL systems.


% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.
% Reading background theory from dir: null
% Load '../background.txt'.

% Switching to VarIndicator = uppercase.

% Switching to standard-logic notation for variables; previous setting = uppercase

% Switching to VarIndicator = lowercase.

***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = lowercase *****


***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = lowercase *****

% [ LazyGroundClauseIndex ]  Building full index for mode/1 with 1 assertions.
% LoadAllModes() called.  Currently loaded modes: []

% Switching to Prolog notation for variables; previous setting = lowercase

% Switching to VarIndicator = uppercase.

% Switching to VarIndicator = lowercase.

% Switching to Prolog notation for variables; previous setting = lowercase

% Switching to VarIndicator = uppercase.

% Switching to VarIndicator = lowercase.

% Switching to Prolog notation for variables; previous setting = lowercase

% Switching to VarIndicator = uppercase.

% Switching to VarIndicator = lowercase.

% Switching to Prolog notation for variables; previous setting = lowercase

% Switching to VarIndicator = uppercase.

% Switching to VarIndicator = lowercase.
% [ LazyGroundClauseIndex ]  Building full index for sameAs/2 with 2 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for exp/3.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for log/3.
% LoadAllLibraries() called.  Currently loaded libraries: [listsInLogic, differentInLogic, modes_arithmeticInLogic, inlines_comparisonInLogic, modes_listsInLogic, inlines_differentInLogic, modes_differentInLogic, arithmeticInLogic, inlines_listsInLogic, modes_comparisonInLogic, comparisonInLogic, inlines_arithmeticInLogic]

%  Read the facts.
%  Have read 30 facts.
% Have read 7 examples from 'C:\Users\sxd170431\Desktop\Disc_data\train' [C:\Users\sxd170431\Desktop\Disc_data\train/train*].
% Have read 8 examples from 'C:\Users\sxd170431\Desktop\Disc_data\train' [C:\Users\sxd170431\Desktop\Disc_data\train/train*].

%  LearnOneClause initialized.

% The outer looper has been created.

% Initializing the ILP inner looper.

% NEW target:                 HA(a)
%  targetPred:                HA/1
%  targetArgTypes:            signature = [Const], types = [+patient]
%  targets:                   [HA(a)]
%  targetPredicates:          [HA/1]
%  targetArgSpecs:            [[a[+patient]]]
%  variablesInTargets:        [[a]]

% Started collecting constants

% Collecting the types of constants.

%   *** WARNING ***  Constant '2' is already marked as being of types = [value1];
%          type = 'value' may be added if not already known.
%  PredicateName = 'Chol', from 'Chol(P1, 2)',
%  which has types = [signature = [Const, Const], types = [+patient, #value]]
%   Other warnings with this predicate and this new type are not reported in order to keep this printout small.  Use dontComplainAboutMultipleTypes to override.

% Looking at the training examples to see if any types of new constants can be inferred.
% Time to collect constants: 2 milliseconds
% Time to collect examples: 0 seconds

% Read 7 pos examples and 8 neg examples.
% Time to init learnOneClause: 7 milliseconds
% Old dirnull
Setting model dir

% Have 7 'raw' positive examples and kept 7.
% Have 8 'raw' negative examples and kept 8.

% processing backup's for HA
%  POS EX = 7
%  NEG EX = 8

% Memory usage by WILLSetup (just counts # targets?):
%  |backupPosExamples| = 1
%  |backupNegExamples| = 1
%  |predicatesAsFacts| = 0
%  |addedToFactBase|   = 0
C:\Users\sxd170431\Desktop\Disc_data\train/models/
File: C:\Users\sxd170431\Desktop\Disc_data\train/advice.txt doesnt exist.Hence no advice loaded
% Learning 3 trees in this iteration for HA

% Learn model for: HA
% Kept 7 of the 7 positive examples.
% Kept 8 of the 8 negative examples.
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.24888888888888888
Set score:0.0025
% Dataset size: 15
Computing probabilities
prob time:2 milliseconds
No hidden examples for : HA
Time to build dataset: 2 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.24888888888888888
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 0 1 2 3 4 5 6 7 9 10
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% LearnOneClause Parameters:
%   Targets (1):
%    HA(+patient)
%  Modes (38):
%    BP(+patient, #value1),
%    Chol(+patient, #value),
%    addList(+willList, #willNumber),
%    multiplyList(+willList, #willNumber),
%    abs(+willNumber, &willNumber),
%    minus(+willNumber, &willNumber),
%    minus(+willNumber, +willNumber, &willNumber),
%    plus(+willNumber, +willNumber, &willNumber),
%    mult(+willNumber, +willNumber, &willNumber),
%    div(+willNumber, +willNumber, &willNumber),
%    allNumbers(+willList),
%    positiveNumber(+willNumber),
%    negativeNumber(+willNumber),
%    in0toDot001(+willNumber),
%    in0toDot01(+willNumber),
%    in0toDot1(+willNumber),
%    in0to1(+willNumber),
%    in0to10(+willNumber),
%    in0to100(+willNumber),
%    in0to1000(+willNumber),
%    equalWithTolerance(+willNumber, +willNumber, &willNumber),
%    greaterOrEqualDifference(+willNumber, +willNumber, &willNumber),
%    smallerOrEqualDifference(+willNumber, +willNumber, &willNumber),
%    isaEqualTolerance(+willNumber),
%    lessThan(+willNumber, +willNumber),
%    greaterThan(+willNumber, +willNumber),
%    lessThanOrEqual(+willNumber, +willNumber),
%    greaterThanOrEqual(+willNumber, +willNumber),
%    inBetweenOO(+willNumber, +willNumber, +willNumber),
%    inBetweenCO(+willNumber, +willNumber, +willNumber),
%    inBetweenOC(+willNumber, +willNumber, +willNumber),
%    inBetweenCC(+willNumber, +willNumber, +willNumber),
%    memberOfList(+willAnything, +willList),
%    firstInList(+willList, &willAnything),
%    restOfList(+willList, &willList),
%    positionInList(+willAnything, +willList, &willNumber),
%    nthInList(+willNumber, +willList, &willAnything),
%    lengthOfList(+willList, &willNumber)

% target           = HA(a)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  HA(_).  [covers 15.0/15.0 pos, 0.0/0.0 neg]
% Most-general root: HA(_).  [covers 15.0/15.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'HA(_).  [covers 15.0/15.0 pos, 0.0/0.0 neg]' score=-Infinity
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for BP/2.
% [ LazyGroundClauseIndex ]  Building full index for BP/2 with 16 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for Chol/2.
% [ LazyGroundClauseIndex ]  Building full index for Chol/2 with 16 assertions.
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -3.333334 (regressionFit = 3.333333, penalties=1.03E-6) for clause:  BP(a, 3) => HA(a).  [covers 6.0/15.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -3.333334): BP(a, 3) => HA(a).  [covers 6.0/15.0 pos, 0.0/0.0 neg]
%     Score = -3.583334 (regressionFit = 3.583333, penalties=1.03E-6) for clause:  BP(a, 2) => HA(a).  [covers 3.0/15.0 pos, 0.0/0.0 neg]
%     Score = -3.666668 (regressionFit = 3.666667, penalties=1.03E-6) for clause:  BP(a, 0) => HA(a).  [covers 3.0/15.0 pos, 0.0/0.0 neg]
%     Score = -2.916668 (regressionFit = 2.916667, penalties=1.03E-6) for clause:  BP(a, 1) => HA(a).  [covers 3.0/15.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -2.916668): BP(a, 1) => HA(a).  [covers 3.0/15.0 pos, 0.0/0.0 neg]
%     Score = -3.700001 (regressionFit = 3.700000, penalties=1.03E-6) for clause:  Chol(a, 2) => HA(a).  [covers 5.0/15.0 pos, 0.0/0.0 neg]
%     Score = -3.714287 (regressionFit = 3.714286, penalties=1.03E-6) for clause:  Chol(a, 0) => HA(a).  [covers 7.0/15.0 pos, 0.0/0.0 neg]
%     Score = -3.583334 (regressionFit = 3.583333, penalties=1.03E-6) for clause:  Chol(a, 1) => HA(a).  [covers 3.0/15.0 pos, 0.0/0.0 neg]

% The best node found: BP(a, 1) => HA(a).  [covers 3.0/15.0 pos, 0.0/0.0 neg]

% The best node found: BP(a, 1) => HA(a).  [covers 3.0/15.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: BP(a, 1) => HA(a).  [covers 3.0/15.0 pos, 0.0/0.0 neg]
Comparing variance: 0.0 to score=0.0025 #egs=3.0
Comparing variance: 0.2430555555555555 to score=0.0025 #egs=12.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 3.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 12.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0.243056)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0.243056) into the LAST position (#1) in the search queue.

% Time for loop #1: 25 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 12

% On cycle #1, the best clause found is:
%      BP(a, 1) => HA(a).  [covers 3.0/15.0 pos, 0.0/0.0 neg]
% This clause covers 3 positive examples, of which 3 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 10 positive seeds: 0 1 2 3 4 5 6 7 8 10
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = HA(a)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  HA(_).  [covers 12.0/12.0 pos, 0.0/0.0 neg]
% Most-general root: HA(_).  [covers 12.0/12.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'HA(_).  [covers 12.0/12.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -2.833334 (regressionFit = 2.833333, penalties=1.03E-6) for clause:  BP(a, 3) => HA(a).  [covers 6.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -2.833334): BP(a, 3) => HA(a).  [covers 6.0/12.0 pos, 0.0/0.0 neg]
%     Score = -2.888890 (regressionFit = 2.888889, penalties=1.03E-6) for clause:  BP(a, 2) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]
%     Score = -2.666668 (regressionFit = 2.666667, penalties=1.03E-6) for clause:  BP(a, 0) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -2.666668): BP(a, 0) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]
%     Score = -2.888890 (regressionFit = 2.888889, penalties=1.03E-6) for clause:  Chol(a, 2) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]
%     Score = -2.833334 (regressionFit = 2.833333, penalties=1.03E-6) for clause:  Chol(a, 0) => HA(a).  [covers 6.0/12.0 pos, 0.0/0.0 neg]
%     Score = -2.888890 (regressionFit = 2.888889, penalties=1.03E-6) for clause:  Chol(a, 1) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]

% The best node found: BP(a, 0) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]

% The best node found: BP(a, 0) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -0.243.
% Will extend: BP(a, 0) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]
Comparing variance: 0.22222222222222224 to score=0.0025 #egs=3.0
Comparing variance: 0.22222222222222218 to score=0.0025 #egs=9.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 3.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 9.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0.222222)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0.222222) into the LAST position (#1) in the search queue.

% Time for loop #2: 11 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 12

% On cycle #2, the best clause found is:
%      BP(a, 0) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]
% This clause covers 3 positive examples, of which 3 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

***** Warning: % Have only 9 positive examples, so cannot choose 10 of them. *****


% Have these 9 positive seeds: 0 1 2 3 4 5 6 7 8
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = HA(a)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  HA(_).  [covers 9.0/9.0 pos, 0.0/0.0 neg]
% Most-general root: HA(_).  [covers 9.0/9.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #3, bodyLen=0] 'HA(_).  [covers 9.0/9.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -2.000001 (regressionFit = 2.000000, penalties=1.03E-6) for clause:  BP(a, 3) => HA(a).  [covers 6.0/9.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -2.000001): BP(a, 3) => HA(a).  [covers 6.0/9.0 pos, 0.0/0.0 neg]
%     Score = -2.000001 (regressionFit = 2.000000, penalties=1.03E-6) for clause:  BP(a, 2) => HA(a).  [covers 3.0/9.0 pos, 0.0/0.0 neg]
%     Score = -2.000001 (regressionFit = 2.000000, penalties=1.03E-6) for clause:  Chol(a, 2) => HA(a).  [covers 3.0/9.0 pos, 0.0/0.0 neg]
%     Score = -1.950001 (regressionFit = 1.950000, penalties=1.03E-6) for clause:  Chol(a, 0) => HA(a).  [covers 5.0/9.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -1.950001): Chol(a, 0) => HA(a).  [covers 5.0/9.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 1) => HA(a).  [covers 1.0/9.0 pos, 0.0/0.0 neg]

% The best node found: Chol(a, 0) => HA(a).  [covers 5.0/9.0 pos, 0.0/0.0 neg]

% The best node found: Chol(a, 0) => HA(a).  [covers 5.0/9.0 pos, 0.0/0.0 neg]

% Expanding node at Level 2 with score = -0.222.
% Will extend: Chol(a, 0) => HA(a).  [covers 5.0/9.0 pos, 0.0/0.0 neg]
Comparing variance: 0.23999999999999994 to score=0.0025 #egs=5.0
Comparing variance: 0.18750000000000006 to score=0.0025 #egs=4.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 5.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 4.0 < 2.1 * minPosCov = 6.3

% Time for loop #3: 8 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 12

% On cycle #3, the best clause found is:
%      Chol(a, 0) => HA(a).  [covers 5.0/9.0 pos, 0.0/0.0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #1 @ 16:52:24 11/19/18.  [Using 1,561,560 memory cells.]  %%%%%


% FOR HA(a):
%   if ( BP(a, 1) )
%   then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( BP(a, 0) )
%   | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( Chol(a, 0) )
%   | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */


% Clauses:

HA(a, -0.14185106490048777) :- 
     BP(a, 1), 
     !. // Clause #1.

HA(a, 0.19148226843284552) :- 
     BP(a, 0), 
     !. // Clause #2.

HA(a, 0.4581489350995122) :- 
     Chol(a, 0), 
     !. // Clause #3.

HA(a, 0.6081489350995122) :- !. // Clause #4.


% The flattened versions of these clauses:

flattened_BP(A, 1) ^
   ! => 
   HA(A, -0.14185106490048777). // Flattened version of clause #1.

flattened_BP(A, 0) ^
   ! => 
   HA(A, 0.19148226843284552). // Flattened version of clause #2.

flattened_Chol(A, 0) ^
   ! => 
   HA(A, 0.4581489350995122). // Flattened version of clause #3.

flattened_! => 
   HA(Underscore, 0.6081489350995122). // Flattened version of clause #4.


% The unique flattened literals:
%   BP(A, 0)
%   BP(A, 1)
%   Chol(A, 0)

% Saving model in: C:\Users\sxd170431\Desktop\Disc_data\train/models/bRDNs/HA.model.ckpt
% Time taken to learn 1 trees is 269 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.2222222222222222
Set score:0.0025
% Only 15 out of 15 converged.
% Kept 7 of the 7 positive examples.
% Kept 8 of the 8 negative examples.
% Dataset size: 15
Computing probabilities
prob time:1 milliseconds
No hidden examples for : HA
Time to build dataset: 1 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22911575834450376
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 9 positive seeds: 1 2 3 6 8 9 11 12 13
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = HA(a)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  HA(_).  [covers 15.0/15.0 pos, 0.0/0.0 neg]
% Most-general root: HA(_).  [covers 15.0/15.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'HA(_).  [covers 15.0/15.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -3.119407 (regressionFit = 3.119406, penalties=1.03E-6) for clause:  BP(a, 3) => HA(a).  [covers 6.0/15.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -3.119407): BP(a, 3) => HA(a).  [covers 6.0/15.0 pos, 0.0/0.0 neg]
%     Score = -3.390951 (regressionFit = 3.390950, penalties=1.03E-6) for clause:  BP(a, 0) => HA(a).  [covers 3.0/15.0 pos, 0.0/0.0 neg]
%     Score = -3.344654 (regressionFit = 3.344653, penalties=1.03E-6) for clause:  BP(a, 2) => HA(a).  [covers 3.0/15.0 pos, 0.0/0.0 neg]
%     Score = -2.829272 (regressionFit = 2.829271, penalties=1.03E-6) for clause:  BP(a, 1) => HA(a).  [covers 3.0/15.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -2.829272): BP(a, 1) => HA(a).  [covers 3.0/15.0 pos, 0.0/0.0 neg]
%     Score = -3.417568 (regressionFit = 3.417567, penalties=1.03E-6) for clause:  Chol(a, 0) => HA(a).  [covers 7.0/15.0 pos, 0.0/0.0 neg]
%     Score = -3.285548 (regressionFit = 3.285547, penalties=1.03E-6) for clause:  Chol(a, 1) => HA(a).  [covers 3.0/15.0 pos, 0.0/0.0 neg]
%     Score = -3.403099 (regressionFit = 3.403098, penalties=1.03E-6) for clause:  Chol(a, 2) => HA(a).  [covers 5.0/15.0 pos, 0.0/0.0 neg]

% The best node found: BP(a, 1) => HA(a).  [covers 3.0/15.0 pos, 0.0/0.0 neg]

% The best node found: BP(a, 1) => HA(a).  [covers 3.0/15.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: BP(a, 1) => HA(a).  [covers 3.0/15.0 pos, 0.0/0.0 neg]
Comparing variance: 0.0 to score=0.0025 #egs=3.0
Comparing variance: 0.23577259308937712 to score=0.0025 #egs=12.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 3.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 12.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0.235773)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0.235773) into the LAST position (#1) in the search queue.

% Time for loop #1: 9 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 12

% On cycle #1, the best clause found is:
%      BP(a, 1) => HA(a).  [covers 3.0/15.0 pos, 0.0/0.0 neg]
% This clause covers 3 positive examples, of which 3 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 8 positive seeds: 0 1 3 5 6 7 9 10
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = HA(a)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  HA(_).  [covers 12.0/12.0 pos, 0.0/0.0 neg]
% Most-general root: HA(_).  [covers 12.0/12.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'HA(_).  [covers 12.0/12.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -2.757165 (regressionFit = 2.757163, penalties=1.03E-6) for clause:  BP(a, 3) => HA(a).  [covers 6.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -2.757165): BP(a, 3) => HA(a).  [covers 6.0/12.0 pos, 0.0/0.0 neg]
%     Score = -2.816691 (regressionFit = 2.816690, penalties=1.03E-6) for clause:  BP(a, 2) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]
%     Score = -2.650990 (regressionFit = 2.650989, penalties=1.03E-6) for clause:  BP(a, 0) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -2.650990): BP(a, 0) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]
%     Score = -2.816691 (regressionFit = 2.816690, penalties=1.03E-6) for clause:  Chol(a, 2) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]
%     Score = -2.756026 (regressionFit = 2.756025, penalties=1.03E-6) for clause:  Chol(a, 0) => HA(a).  [covers 6.0/12.0 pos, 0.0/0.0 neg]
%     Score = -2.789135 (regressionFit = 2.789134, penalties=1.03E-6) for clause:  Chol(a, 1) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]

% The best node found: BP(a, 0) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]

% The best node found: BP(a, 0) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -0.236.
% Will extend: BP(a, 0) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]
Comparing variance: 0.2222222222222222 to score=0.0025 #egs=3.0
Comparing variance: 0.2204802385848352 to score=0.0025 #egs=9.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 3.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 9.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0.220480)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0.220480) into the LAST position (#1) in the search queue.

% Time for loop #2: 7 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 12

% On cycle #2, the best clause found is:
%      BP(a, 0) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]
% This clause covers 3 positive examples, of which 3 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 9 positive seeds: 0 1 2 3 4 5 6 7 8
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = HA(a)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  HA(_).  [covers 9.0/9.0 pos, 0.0/0.0 neg]
% Most-general root: HA(_).  [covers 9.0/9.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #3, bodyLen=0] 'HA(_).  [covers 9.0/9.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -1.983404 (regressionFit = 1.983403, penalties=1.03E-6) for clause:  BP(a, 3) => HA(a).  [covers 6.0/9.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -1.983404): BP(a, 3) => HA(a).  [covers 6.0/9.0 pos, 0.0/0.0 neg]
%     Score = -1.983404 (regressionFit = 1.983403, penalties=1.03E-6) for clause:  BP(a, 2) => HA(a).  [covers 3.0/9.0 pos, 0.0/0.0 neg]
%     Score = -1.983404 (regressionFit = 1.983403, penalties=1.03E-6) for clause:  Chol(a, 2) => HA(a).  [covers 3.0/9.0 pos, 0.0/0.0 neg]
%     Score = -1.950001 (regressionFit = 1.950000, penalties=1.03E-6) for clause:  Chol(a, 0) => HA(a).  [covers 5.0/9.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -1.950001): Chol(a, 0) => HA(a).  [covers 5.0/9.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 1) => HA(a).  [covers 1.0/9.0 pos, 0.0/0.0 neg]

% The best node found: Chol(a, 0) => HA(a).  [covers 5.0/9.0 pos, 0.0/0.0 neg]

% The best node found: Chol(a, 0) => HA(a).  [covers 5.0/9.0 pos, 0.0/0.0 neg]

% Expanding node at Level 2 with score = -0.220.
% Will extend: Chol(a, 0) => HA(a).  [covers 5.0/9.0 pos, 0.0/0.0 neg]
Comparing variance: 0.24 to score=0.0025 #egs=5.0
Comparing variance: 0.18750000000000006 to score=0.0025 #egs=4.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 5.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 4.0 < 2.1 * minPosCov = 6.3

% Time for loop #3: 6 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 12

% On cycle #3, the best clause found is:
%      Chol(a, 0) => HA(a).  [covers 5.0/9.0 pos, 0.0/0.0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #2 @ 16:52:25 11/19/18.  [Using 1,508,744 memory cells.]  %%%%%


% FOR HA(a):
%   if ( BP(a, 1) )
%   then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( BP(a, 0) )
%   | then return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( Chol(a, 0) )
%   | | then return 0.3927941835770488;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.5170719622367217;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */


% Clauses:

HA(a, -0.12544463852839138) :- 
     BP(a, 1), 
     !. // Clause #1.

HA(a, 0.16653882456488175) :- 
     BP(a, 0), 
     !. // Clause #2.

HA(a, 0.3927941835770488) :- 
     Chol(a, 0), 
     !. // Clause #3.

HA(a, 0.5170719622367217) :- !. // Clause #4.


% The flattened versions of these clauses:

flattened_BP(A, 1) ^
   ! => 
   HA(A, -0.12544463852839138). // Flattened version of clause #1.

flattened_BP(A, 0) ^
   ! => 
   HA(A, 0.16653882456488175). // Flattened version of clause #2.

flattened_Chol(A, 0) ^
   ! => 
   HA(A, 0.3927941835770488). // Flattened version of clause #3.

flattened_! => 
   HA(Underscore, 0.5170719622367217). // Flattened version of clause #4.


% The unique flattened literals:
%   BP(A, 0)
%   BP(A, 1)
%   Chol(A, 0)

% Saving model in: C:\Users\sxd170431\Desktop\Disc_data\train/models/bRDNs/HA.model.ckpt
% Time taken to learn 2 trees is 340 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.2204802385848352
Set score:0.0025
% Only 15 out of 15 converged.
% Kept 7 of the 7 positive examples.
% Kept 8 of the 8 negative examples.
% Dataset size: 15
Computing probabilities
prob time:1 milliseconds
No hidden examples for : HA
Time to build dataset: 1 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.21102086146482357
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 9 positive seeds: 1 2 3 4 5 8 10 11 12
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = HA(a)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  HA(_).  [covers 15.0/15.0 pos, 0.0/0.0 neg]
% Most-general root: HA(_).  [covers 15.0/15.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'HA(_).  [covers 15.0/15.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 7 items to OPEN for evaluation and possible insertion.
% Have created 7 valid-on-seeds descendants.
%     Score = -2.925322 (regressionFit = 2.925321, penalties=1.03E-6) for clause:  BP(a, 3) => HA(a).  [covers 6.0/15.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -2.925322): BP(a, 3) => HA(a).  [covers 6.0/15.0 pos, 0.0/0.0 neg]
%     Score = -3.122949 (regressionFit = 3.122948, penalties=1.03E-6) for clause:  BP(a, 2) => HA(a).  [covers 3.0/15.0 pos, 0.0/0.0 neg]
%     Score = -2.743801 (regressionFit = 2.743800, penalties=1.03E-6) for clause:  BP(a, 1) => HA(a).  [covers 3.0/15.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -2.743801): BP(a, 1) => HA(a).  [covers 3.0/15.0 pos, 0.0/0.0 neg]
%     Score = -3.140798 (regressionFit = 3.140797, penalties=1.03E-6) for clause:  BP(a, 0) => HA(a).  [covers 3.0/15.0 pos, 0.0/0.0 neg]
%     Score = -3.147265 (regressionFit = 3.147264, penalties=1.03E-6) for clause:  Chol(a, 0) => HA(a).  [covers 7.0/15.0 pos, 0.0/0.0 neg]
%     Score = -3.009639 (regressionFit = 3.009638, penalties=1.03E-6) for clause:  Chol(a, 1) => HA(a).  [covers 3.0/15.0 pos, 0.0/0.0 neg]
%     Score = -3.128213 (regressionFit = 3.128212, penalties=1.03E-6) for clause:  Chol(a, 2) => HA(a).  [covers 5.0/15.0 pos, 0.0/0.0 neg]

% The best node found: BP(a, 1) => HA(a).  [covers 3.0/15.0 pos, 0.0/0.0 neg]

% The best node found: BP(a, 1) => HA(a).  [covers 3.0/15.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: BP(a, 1) => HA(a).  [covers 3.0/15.0 pos, 0.0/0.0 neg]
Comparing variance: 2.3129646346357427E-18 to score=0.0025 #egs=3.0
Comparing variance: 0.22864995869168517 to score=0.0025 #egs=12.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 3.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 12.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0.228650)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0.228650) into the LAST position (#1) in the search queue.

% Time for loop #1: 5 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 12

% On cycle #1, the best clause found is:
%      BP(a, 1) => HA(a).  [covers 3.0/15.0 pos, 0.0/0.0 neg]
% This clause covers 3 positive examples, of which 3 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 9 positive seeds: 0 2 3 4 5 6 7 8 9
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = HA(a)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  HA(_).  [covers 12.0/12.0 pos, 0.0/0.0 neg]
% Most-general root: HA(_).  [covers 12.0/12.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'HA(_).  [covers 12.0/12.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -2.683138 (regressionFit = 2.683137, penalties=1.03E-6) for clause:  BP(a, 3) => HA(a).  [covers 6.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -2.683138): BP(a, 3) => HA(a).  [covers 6.0/12.0 pos, 0.0/0.0 neg]
%     Score = -2.741780 (regressionFit = 2.741779, penalties=1.03E-6) for clause:  BP(a, 2) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]
%     Score = -2.635333 (regressionFit = 2.635331, penalties=1.03E-6) for clause:  BP(a, 0) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -2.635333): BP(a, 0) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]
%     Score = -2.741780 (regressionFit = 2.741779, penalties=1.03E-6) for clause:  Chol(a, 2) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]
%     Score = -2.682964 (regressionFit = 2.682963, penalties=1.03E-6) for clause:  Chol(a, 0) => HA(a).  [covers 6.0/12.0 pos, 0.0/0.0 neg]
%     Score = -2.686266 (regressionFit = 2.686265, penalties=1.03E-6) for clause:  Chol(a, 1) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]

% The best node found: BP(a, 0) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]

% The best node found: BP(a, 0) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -0.229.
% Will extend: BP(a, 0) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]
Comparing variance: 0.22222222222222218 to score=0.0025 #egs=3.0
Comparing variance: 0.2187405356859521 to score=0.0025 #egs=9.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 3.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 9.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0.218741)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -0.218741) into the LAST position (#1) in the search queue.

% Time for loop #2: 4 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 12

% On cycle #2, the best clause found is:
%      BP(a, 0) => HA(a).  [covers 3.0/12.0 pos, 0.0/0.0 neg]
% This clause covers 3 positive examples, of which 3 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 9 positive seeds: 0 1 2 3 4 5 6 7 8
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = HA(a)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  HA(_).  [covers 9.0/9.0 pos, 0.0/0.0 neg]
% Most-general root: HA(_).  [covers 9.0/9.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #3, bodyLen=0] 'HA(_).  [covers 9.0/9.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -1.963937 (regressionFit = 1.963936, penalties=1.03E-6) for clause:  BP(a, 3) => HA(a).  [covers 6.0/9.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -1.963937): BP(a, 3) => HA(a).  [covers 6.0/9.0 pos, 0.0/0.0 neg]
%     Score = -1.963937 (regressionFit = 1.963936, penalties=1.03E-6) for clause:  BP(a, 2) => HA(a).  [covers 3.0/9.0 pos, 0.0/0.0 neg]
%     Score = -1.963937 (regressionFit = 1.963936, penalties=1.03E-6) for clause:  Chol(a, 2) => HA(a).  [covers 3.0/9.0 pos, 0.0/0.0 neg]
%     Score = -1.950001 (regressionFit = 1.950000, penalties=1.03E-6) for clause:  Chol(a, 0) => HA(a).  [covers 5.0/9.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -1.950001): Chol(a, 0) => HA(a).  [covers 5.0/9.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.03E-6) for clause:  Chol(a, 1) => HA(a).  [covers 1.0/9.0 pos, 0.0/0.0 neg]

% The best node found: Chol(a, 0) => HA(a).  [covers 5.0/9.0 pos, 0.0/0.0 neg]

% The best node found: Chol(a, 0) => HA(a).  [covers 5.0/9.0 pos, 0.0/0.0 neg]

% Expanding node at Level 2 with score = -0.219.
% Will extend: Chol(a, 0) => HA(a).  [covers 5.0/9.0 pos, 0.0/0.0 neg]
Comparing variance: 0.24000000000000005 to score=0.0025 #egs=5.0
Comparing variance: 0.18750000000000003 to score=0.0025 #egs=4.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 5.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 4.0 < 2.1 * minPosCov = 6.3

% Time for loop #3: 3 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 12

% On cycle #3, the best clause found is:
%      Chol(a, 0) => HA(a).  [covers 5.0/9.0 pos, 0.0/0.0 neg]
% This clause covers 5 positive examples, of which 5 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #3 @ 16:52:25 11/19/18.  [Using 1,521,936 memory cells.]  %%%%%


% FOR HA(a):
%   if ( BP(a, 1) )
%   then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( BP(a, 0) )
%   | then return 0.1420942428155648;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( Chol(a, 0) )
%   | | then return 0.32092546969114216;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.41257245288266;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */


% Clauses:

HA(a, -0.11231637819360639) :- 
     BP(a, 1), 
     !. // Clause #1.

HA(a, 0.1420942428155648) :- 
     BP(a, 0), 
     !. // Clause #2.

HA(a, 0.32092546969114216) :- 
     Chol(a, 0), 
     !. // Clause #3.

HA(a, 0.41257245288266) :- !. // Clause #4.


% The flattened versions of these clauses:

flattened_BP(A, 1) ^
   ! => 
   HA(A, -0.11231637819360639). // Flattened version of clause #1.

flattened_BP(A, 0) ^
   ! => 
   HA(A, 0.1420942428155648). // Flattened version of clause #2.

flattened_Chol(A, 0) ^
   ! => 
   HA(A, 0.32092546969114216). // Flattened version of clause #3.

flattened_! => 
   HA(Underscore, 0.41257245288266). // Flattened version of clause #4.


% The unique flattened literals:
%   BP(A, 0)
%   BP(A, 1)
%   Chol(A, 0)

% Saving model in: C:\Users\sxd170431\Desktop\Disc_data\train/models/bRDNs/HA.model.ckpt


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for HA.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).

logPrior(-1.8).
HA(a, total) :- // A general accessor. 
   HA(a, 1000000, total), !.
HA(a, total) :- waitHere("This should not fail", HA(a, total)).

HA(a, treesToUse, total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(logPrior),
   getScore_HA_tree1(a, treesToUse, total1),
   getScore_HA_tree2(a, treesToUse, total2),
   getScore_HA_tree3(a, treesToUse, total3),
   total is logPrior + total1 + total2 + total3,
   !.
HA(a, treesToUse, total) :- waitHere("This should not fail", HA(a, treesToUse, total)).

getScore_HA_tree1(a, treesToUse, 0.0) :- 1 > treesToUse, !.
getScore_HA_tree1(a, treesToUse, total1) :- HA_tree1(a, total), stepLength_tree1(stepLen), total1 is total * stepLen.

getScore_HA_tree2(a, treesToUse, 0.0) :- 2 > treesToUse, !.
getScore_HA_tree2(a, treesToUse, total2) :- HA_tree2(a, total), stepLength_tree2(stepLen), total2 is total * stepLen.

getScore_HA_tree3(a, treesToUse, 0.0) :- 3 > treesToUse, !.
getScore_HA_tree3(a, treesToUse, total3) :- HA_tree3(a, total), stepLength_tree3(stepLen), total3 is total * stepLen.

flattenedLiteralsInThisSetOfTrees(HA, 3, [
   BP(A, 0),
   BP(A, 1),
   Chol(A, 0)]).
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:2.0569204583657674
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 9 positive seeds: 0 1 9 15 16 20 24 25 27
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = HA(a)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  HA(_).  [covers 45.0/45.0 pos, 0.0/0.0 neg]
% Most-general root: HA(_).  [covers 45.0/45.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'HA(_).  [covers 45.0/45.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -84.037015 (regressionFit = 84.037014, penalties=1.03E-6) for clause:  BP(a, 3) => HA(a).  [covers 18.0/45.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -84.037015): BP(a, 3) => HA(a).  [covers 18.0/45.0 pos, 0.0/0.0 neg]
%     Score = -90.149858 (regressionFit = 90.149857, penalties=1.03E-6) for clause:  BP(a, 2) => HA(a).  [covers 9.0/45.0 pos, 0.0/0.0 neg]
%     Score = -76.242029 (regressionFit = 76.242028, penalties=1.03E-6) for clause:  BP(a, 1) => HA(a).  [covers 9.0/45.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -76.242029): BP(a, 1) => HA(a).  [covers 9.0/45.0 pos, 0.0/0.0 neg]
%     Score = -91.375432 (regressionFit = 91.375431, penalties=1.03E-6) for clause:  BP(a, 0) => HA(a).  [covers 9.0/45.0 pos, 0.0/0.0 neg]
%     Score = -91.625332 (regressionFit = 91.625331, penalties=1.03E-6) for clause:  Chol(a, 2) => HA(a).  [covers 15.0/45.0 pos, 0.0/0.0 neg]
%     Score = -92.055120 (regressionFit = 92.055119, penalties=1.03E-6) for clause:  Chol(a, 0) => HA(a).  [covers 21.0/45.0 pos, 0.0/0.0 neg]

% The best node found: BP(a, 1) => HA(a).  [covers 9.0/45.0 pos, 0.0/0.0 neg]

% The best node found: BP(a, 1) => HA(a).  [covers 9.0/45.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: BP(a, 1) => HA(a).  [covers 9.0/45.0 pos, 0.0/0.0 neg]
Comparing variance: 2.4671622769447922E-17 to score=0.0025 #egs=9.0
Comparing variance: 2.1178341184058858 to score=0.0025 #egs=36.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 36.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-2.117834)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -2.117834) into the LAST position (#1) in the search queue.

% Time for loop #1: 4 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 12

% On cycle #1, the best clause found is:
%      BP(a, 1) => HA(a).  [covers 9.0/45.0 pos, 0.0/0.0 neg]
% This clause covers 9 positive examples, of which 9 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 9 positive seeds: 1 5 6 9 15 19 23 31 32
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = HA(a)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  HA(_).  [covers 36.0/36.0 pos, 0.0/0.0 neg]
% Most-general root: HA(_).  [covers 36.0/36.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #2, bodyLen=0] 'HA(_).  [covers 36.0/36.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants.
%     Score = -74.305186 (regressionFit = 74.305185, penalties=1.03E-6) for clause:  BP(a, 3) => HA(a).  [covers 18.0/36.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -74.305186): BP(a, 3) => HA(a).  [covers 18.0/36.0 pos, 0.0/0.0 neg]
%     Score = -75.927536 (regressionFit = 75.927535, penalties=1.03E-6) for clause:  BP(a, 2) => HA(a).  [covers 9.0/36.0 pos, 0.0/0.0 neg]
%     Score = -71.542674 (regressionFit = 71.542673, penalties=1.03E-6) for clause:  BP(a, 0) => HA(a).  [covers 9.0/36.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -71.542674): BP(a, 0) => HA(a).  [covers 9.0/36.0 pos, 0.0/0.0 neg]
%     Score = -74.293289 (regressionFit = 74.293288, penalties=1.03E-6) for clause:  Chol(a, 0) => HA(a).  [covers 18.0/36.0 pos, 0.0/0.0 neg]
%     Score = -75.927536 (regressionFit = 75.927535, penalties=1.03E-6) for clause:  Chol(a, 2) => HA(a).  [covers 9.0/36.0 pos, 0.0/0.0 neg]
%     Score = -75.137147 (regressionFit = 75.137146, penalties=1.03E-6) for clause:  Chol(a, 1) => HA(a).  [covers 9.0/36.0 pos, 0.0/0.0 neg]

% The best node found: BP(a, 0) => HA(a).  [covers 9.0/36.0 pos, 0.0/0.0 neg]

% The best node found: BP(a, 0) => HA(a).  [covers 9.0/36.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -2.118.
% Will extend: BP(a, 0) => HA(a).  [covers 9.0/36.0 pos, 0.0/0.0 neg]
Comparing variance: 1.9999999999999996 to score=0.0025 #egs=9.0
Comparing variance: 1.9830619583545301 to score=0.0025 #egs=27.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 9.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-2.000000)
%         ILP node to extend: BP(a, 0) => HA(a).  [covers 9.0/36.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -2.000000) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 27.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-1.983062)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 2 and with score = -1.983062) into the LAST position (#2) in the search queue.

% Time for loop #2: 6 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 12

% On cycle #2, the best clause found is:
%      BP(a, 0) => HA(a).  [covers 9.0/36.0 pos, 0.0/0.0 neg]
% This clause covers 9 positive examples, of which 9 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'BP(a, 0) => HA(a).  [covers 9.0/9.0 pos, 0.0/0.0 neg]'
%     Score = -71.542674 (regressionFit = 71.542673, penalties=1.03E-6) for clause:  BP(a, 0) => HA(a).  [covers 9.0/9.0 pos, 0.0/0.0 neg]

% Have these 9 positive seeds: 0 1 2 3 4 5 6 7 8
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #3, bodyLen=1] 'BP(a, 0) => HA(a).  [covers 9.0/9.0 pos, 0.0/0.0 neg]' score=-71.54267390557231
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants.
%     Score = -13.500002 (regressionFit = 13.500000, penalties=2.0500000000000003E-6) for clause:  BP(a, 0) ^ Chol(a, 1) => HA(a).  [covers 6.0/9.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -13.500002): BP(a, 0) ^ Chol(a, 1) => HA(a).  [covers 6.0/9.0 pos, 0.0/0.0 neg]
%     Score = -13.500002 (regressionFit = 13.500000, penalties=2.0300000000000005E-6) for clause:  BP(a, 0) ^ Chol(a, 0) => HA(a).  [covers 3.0/9.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -13.500002): BP(a, 0) ^ Chol(a, 0) => HA(a).  [covers 3.0/9.0 pos, 0.0/0.0 neg]

% The best node found: BP(a, 0) ^ Chol(a, 0) => HA(a).  [covers 3.0/9.0 pos, 0.0/0.0 neg]

% The best node found: BP(a, 0) ^ Chol(a, 0) => HA(a).  [covers 3.0/9.0 pos, 0.0/0.0 neg]

% Expanding node at Level 2 with score = -2.000.
% Will extend: BP(a, 0) ^ Chol(a, 0) => HA(a).  [covers 3.0/9.0 pos, 0.0/0.0 neg]
Comparing variance: 0.0 to score=0.0025 #egs=3.0
Comparing variance: 2.2499999999999996 to score=0.0025 #egs=6.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 3.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 6.0 < 2.1 * minPosCov = 6.3

% Time for loop #3: 3 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 12

% On cycle #3, the best clause found is:
%      BP(a, 0) ^ Chol(a, 0) => HA(a).  [covers 3.0/9.0 pos, 0.0/0.0 neg]
% This clause covers 3 positive examples, of which 3 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 9 positive seeds: 0 6 10 11 12 13 19 20 25
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = HA(a)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  HA(_).  [covers 27.0/27.0 pos, 0.0/0.0 neg]
% Most-general root: HA(_).  [covers 27.0/27.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #4, bodyLen=0] 'HA(_).  [covers 27.0/27.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -53.513221 (regressionFit = 53.513220, penalties=1.03E-6) for clause:  BP(a, 3) => HA(a).  [covers 18.0/27.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -53.513221): BP(a, 3) => HA(a).  [covers 18.0/27.0 pos, 0.0/0.0 neg]
%     Score = -53.513221 (regressionFit = 53.513220, penalties=1.03E-6) for clause:  BP(a, 2) => HA(a).  [covers 9.0/27.0 pos, 0.0/0.0 neg]
%     Score = -53.513221 (regressionFit = 53.513220, penalties=1.03E-6) for clause:  Chol(a, 2) => HA(a).  [covers 9.0/27.0 pos, 0.0/0.0 neg]
%     Score = -52.650001 (regressionFit = 52.650000, penalties=1.03E-6) for clause:  Chol(a, 0) => HA(a).  [covers 15.0/27.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -52.650001): Chol(a, 0) => HA(a).  [covers 15.0/27.0 pos, 0.0/0.0 neg]
%     Score = -50.475593 (regressionFit = 50.475592, penalties=1.03E-6) for clause:  Chol(a, 1) => HA(a).  [covers 3.0/27.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -50.475593): Chol(a, 1) => HA(a).  [covers 3.0/27.0 pos, 0.0/0.0 neg]

% The best node found: Chol(a, 1) => HA(a).  [covers 3.0/27.0 pos, 0.0/0.0 neg]

% The best node found: Chol(a, 1) => HA(a).  [covers 3.0/27.0 pos, 0.0/0.0 neg]

% Expanding node at Level 2 with score = -1.983.
% Will extend: Chol(a, 1) => HA(a).  [covers 3.0/27.0 pos, 0.0/0.0 neg]
Comparing variance: 0.0 to score=0.0025 #egs=3.0
Comparing variance: 2.103149660252402 to score=0.0025 #egs=24.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 3.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 24.0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-2.103150)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 3 and with score = -2.103150) into the LAST position (#1) in the search queue.

% Time for loop #4: 3 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 12

% On cycle #4, the best clause found is:
%      Chol(a, 1) => HA(a).  [covers 3.0/27.0 pos, 0.0/0.0 neg]
% This clause covers 3 positive examples, of which 3 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Have these 9 positive seeds: 1 6 8 10 11 12 13 17 18
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = HA(a)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  HA(_).  [covers 24.0/24.0 pos, 0.0/0.0 neg]
% Most-general root: HA(_).  [covers 24.0/24.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #5, bodyLen=0] 'HA(_).  [covers 24.0/24.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -49.013221 (regressionFit = 49.013220, penalties=1.03E-6) for clause:  BP(a, 3) => HA(a).  [covers 18.0/24.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -49.013221): BP(a, 3) => HA(a).  [covers 18.0/24.0 pos, 0.0/0.0 neg]
%     Score = -49.013221 (regressionFit = 49.013220, penalties=1.03E-6) for clause:  BP(a, 2) => HA(a).  [covers 6.0/24.0 pos, 0.0/0.0 neg]
%     Score = -50.400001 (regressionFit = 50.400000, penalties=1.03E-6) for clause:  Chol(a, 0) => HA(a).  [covers 15.0/24.0 pos, 0.0/0.0 neg]
%     Score = -50.400001 (regressionFit = 50.400000, penalties=1.03E-6) for clause:  Chol(a, 2) => HA(a).  [covers 9.0/24.0 pos, 0.0/0.0 neg]

% The best node found: BP(a, 3) => HA(a).  [covers 18.0/24.0 pos, 0.0/0.0 neg]

% The best node found: BP(a, 3) => HA(a).  [covers 18.0/24.0 pos, 0.0/0.0 neg]

% Expanding node at Level 3 with score = -2.103.
% Will extend: BP(a, 3) => HA(a).  [covers 18.0/24.0 pos, 0.0/0.0 neg]
Comparing variance: 1.9729566769600868 to score=0.0025 #egs=18.0
Comparing variance: 2.2499999999999996 to score=0.0025 #egs=6.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 18.0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-1.972957)
%         ILP node to extend: BP(a, 3) => HA(a).  [covers 18.0/24.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -1.972957) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 6.0 < 2.1 * minPosCov = 6.3

% Time for loop #5: 3 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 12

% On cycle #5, the best clause found is:
%      BP(a, 3) => HA(a).  [covers 18.0/24.0 pos, 0.0/0.0 neg]
% This clause covers 18 positive examples, of which 18 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'BP(a, 3) => HA(a).  [covers 18.0/18.0 pos, 0.0/0.0 neg]'
%     Score = -49.013221 (regressionFit = 49.013220, penalties=1.03E-6) for clause:  BP(a, 3) => HA(a).  [covers 18.0/18.0 pos, 0.0/0.0 neg]

% Have these 9 positive seeds: 0 2 6 8 9 10 12 13 14
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #6, bodyLen=1] 'BP(a, 3) => HA(a).  [covers 18.0/18.0 pos, 0.0/0.0 neg]' score=-49.01322121528156
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants.
%     Score = -32.400002 (regressionFit = 32.400000, penalties=2.0500000000000003E-6) for clause:  BP(a, 3) ^ Chol(a, 2) => HA(a).  [covers 3.0/18.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -32.400002): BP(a, 3) ^ Chol(a, 2) => HA(a).  [covers 3.0/18.0 pos, 0.0/0.0 neg]
%     Score = -32.400002 (regressionFit = 32.400000, penalties=2.0500000000000003E-6) for clause:  BP(a, 3) ^ Chol(a, 0) => HA(a).  [covers 15.0/18.0 pos, 0.0/0.0 neg]

% The best node found: BP(a, 3) ^ Chol(a, 2) => HA(a).  [covers 3.0/18.0 pos, 0.0/0.0 neg]

% The best node found: BP(a, 3) ^ Chol(a, 2) => HA(a).  [covers 3.0/18.0 pos, 0.0/0.0 neg]

% Expanding node at Level 4 with score = -1.973.
% Will extend: BP(a, 3) ^ Chol(a, 2) => HA(a).  [covers 3.0/18.0 pos, 0.0/0.0 neg]
Comparing variance: 0.0 to score=0.0025 #egs=3.0
Comparing variance: 2.1599999999999993 to score=0.0025 #egs=15.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 3.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 15.0
%      addToQueueOfTreeStructuredLearningTasks (level=5; score=-2.160000)
%         ILP node to extend: BP(a, 3) => HA(a).  [covers 18.0/18.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 5 and with score = -2.160000) into the LAST position (#1) in the search queue.

% Time for loop #6: 2 milliseconds.
% Internal node max length = 1
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 12

% On cycle #6, the best clause found is:
%      BP(a, 3) ^ Chol(a, 2) => HA(a).  [covers 3.0/18.0 pos, 0.0/0.0 neg]
% This clause covers 3 positive examples, of which 3 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'BP(a, 3) => HA(a).  [covers 18.0/15.0 pos, 0.0/0.0 neg]'
%     Score = -49.013221 (regressionFit = 49.013220, penalties=1.03E-6) for clause:  BP(a, 3) => HA(a).  [covers 15.0/15.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 0 1 3 5 9 12 13 14
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Consider expanding [#1 of outerLoop #7, bodyLen=1] 'BP(a, 3) => HA(a).  [covers 15.0/15.0 pos, 0.0/0.0 neg]' score=-49.01322121528156
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 1 items to OPEN for evaluation and possible insertion.
% Have created 1 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.0500000000000003E-6) for clause:  BP(a, 3) ^ Chol(a, 0) => HA(a).  [covers 15.0/15.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -49.0132):
%  BP(a, 3) => HA(a).  [covers 15.0/15.0 pos, 0.0/0.0 neg]
Created a leaf under (Chol(a, 2) => HA(a))

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree Combined @ 16:52:25 11/19/18.  [Using 1,547,808 memory cells.]  %%%%%


% FOR HA(a):
%   if ( BP(a, 1) )
%   then return -0.37961208162248555;  // std dev = 1.49e-08, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( BP(a, 0) )
%   | then if ( Chol(a, 0) )
%   | | then return -0.49988466418670785;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 1.000115335813292;  // std dev = 3.674, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( Chol(a, 1) )
%   | | then return 2.2877933502188936;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( BP(a, 3) )
%   | | | then if ( Chol(a, 2) )
%   | | | | then return 2.2877933502188936;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | | else return 1.1718685883677036;  // std dev = 1.470, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | | else return 0.7877933502188936;  // std dev = 3.674, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */


% Clauses:

HA(a, -0.37961208162248555) :- 
     BP(a, 1), 
     !. // Clause #1.

HA(a, -0.49988466418670785) :- 
     BP(a, 0), 
     Chol(a, 0), 
     !. // Clause #2.

HA(a, 1.000115335813292) :- 
     BP(a, 0), 
     !. // Clause #3.

HA(a, 2.2877933502188936) :- 
     Chol(a, 1), 
     !. // Clause #4.

HA(a, 2.2877933502188936) :- 
     BP(a, 3), 
     Chol(a, 2), 
     !. // Clause #5.

HA(a, 1.1718685883677036) :- 
     BP(a, 3), 
     !. // Clause #6.

HA(a, 0.7877933502188936) :- !. // Clause #7.


% The flattened versions of these clauses:

flattened_BP(A, 1) ^
   ! => 
   HA(A, -0.37961208162248555). // Flattened version of clause #1.

flattened_BP(A, 0) ^
   Chol(A, 0) ^
   ! => 
   HA(A, -0.49988466418670785). // Flattened version of clause #2.

flattened_BP(A, 0) ^
   ! => 
   HA(A, 1.000115335813292). // Flattened version of clause #3.

flattened_Chol(A, 1) ^
   ! => 
   HA(A, 2.2877933502188936). // Flattened version of clause #4.

flattened_BP(A, 3) ^
   Chol(A, 2) ^
   ! => 
   HA(A, 2.2877933502188936). // Flattened version of clause #5.

flattened_BP(A, 3) ^
   ! => 
   HA(A, 1.1718685883677036). // Flattened version of clause #6.

flattened_! => 
   HA(Underscore, 0.7877933502188936). // Flattened version of clause #7.


% The unique flattened literals:
%   Chol(A, 2)
%   Chol(A, 1)
%   BP(A, 1)
%   Chol(A, 0)
%   BP(A, 0)
%   BP(A, 3)

% Time taken to learn model for 'HA': 479 milliseconds.
% Saving model in: C:\Users\sxd170431\Desktop\Disc_data\train/models/bRDNs/HA.model
cached groundings hit: 0
Misses: 0

% Total learning time (3 trees): 655 milliseconds.
